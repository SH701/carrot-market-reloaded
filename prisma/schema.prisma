generator client {
  provider = "prisma-client-js"
  engineType  = "binary"  
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  username   String     @unique
  email      String?    @unique
  password   String?
  phone      String?    @unique
  github_id  String?    @unique
  avatar     String?
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  tokens   SMSToken[]
  products Product[] @relation("UserProducts")
  posts Post[]
  likes Like[]
  comments Comment[]
  chat_rooms ChatRoom[]
  messages Message[]
   reviews Review[]
}

model SMSToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
enum ProductStatus {
  SALE
  RESERVED
  SOLD_OUT
}
model Product {
   id          Int    @id @default(autoincrement())
   title       String
   price       Float
   photo       String
   description String
   created_at DateTime @default(now())
   updated_at DateTime @updatedAt
   isSold Boolean @default(false)
   status      ProductStatus @default(SALE) 
   user       User     @relation("UserProducts",fields: [userId], references: [id],onDelete: Cascade)
   userId     Int
   chatRoom    ChatRoom[]
   reviews     Review[]  
}

model Post{
  id Int @id @default(autoincrement())
  title String
  description String?
  views Int @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId Int
  comments Comment[]
  likes Like[]
}
model Comment{
  id Int @id @default(autoincrement())
  payload String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  post Post @relation(fields: [postId],references: [id],onDelete: Cascade)
  userId Int
  postId Int
}

model Like{
  @@id(name: "id",[userId,postId])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  post Post @relation(fields: [postId],references: [id],onDelete: Cascade)
  postId Int
  userId Int
}

model ChatRoom{
  id String @id @default(cuid())
  users User[]
  messages Message[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
}
model Message{
  id Int @id @default(autoincrement())
  isRead Boolean @default(false)
  payload String
  room ChatRoom @relation(fields: [chatRoomId],references: [id])
  chatRoomId String
  user User @relation(fields: [userId],references: [id])
  userId Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
model Review {
  id          Int         @id @default(autoincrement())
  product     Product  @relation(fields: [productId], references: [id])
  productId Int

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int

  userRating      String                 
  detailRating String
  createdAt     DateTime @default(now())
}
